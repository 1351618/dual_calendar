// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã
import {
  DataYear,
  Months,
  DaysOfWeek,
  DataDay,
  AmountOfDays,
} from "./static_data.js";
import {
  DateFromDiv,
  DateToDiv,
  daysChoice,
  daysChoiceNum,
  yearChoice,
  dateFromYear,
  dateFromYearP,
  dateFromYearLeftBtn,
  dateFromYearRightBtn,
  dateFromMonth,
  dateFromMonthP,
  monthElements,
  monthChoice,
  dateFromMonthLeftBtn,
  dateFromMonthRightBtn,
  dateFromContent,
  dateFromInfoBtn,
  dateFromContentInput,
  dateFromDayInp,
  dateFromMonthInp,
  dateFromYearInp,
} from "./variables.js";

// ‚à∞  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≤ –ø–æ–ª—è –¥–∞—Ç ‚à∞
////  –≤ –∫–∞–∫–æ–π —Ç–µ–≥ / –∏–∑ –∫–∞–∫–æ–≥–æ –æ–±—å–µ–∫—Ç–∞ / –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—å–µ–∫—Ç–∞
function dateEntry(inputW, preparOBG, num) {
  inputW.value = preparOBG[num];
}
// üìó  –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ üìó
// –ø–µ—Ä–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–∞—Ç–∞ –æ—Ç
let preparationFrom = {
  prepDay: "",
  prepMonth: "",
  prepYear: "",
};
//–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//* –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç
//–∏–Ω–¥—ã–∫—Å –≥–æ–¥–∞
let yearIndex = 0;
// –∏–Ω–¥—ã–∫—Å –º–µ—Å—è—Ü–∞
let month = 0;

// üìó  –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ —Ä—É—á–Ω—É—é üìó

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ –∏–º–ø—É—Ç–∞—Ö
function restrictInput(
  input,
  maxLength,
  minValue,
  maxValue,
  preparationObj,
  dataStr
) {
  input.addEventListener("input", function (event) {
    this.value = this.value.replace(/[^\d]/g, "").slice(0, maxLength);
    if (this.value !== "") {
      this.value = Math.min(Math.max(minValue, this.value), maxValue);
    }
    console.log(this.value, "—Å—Ç—Ä–æ–∫–∞ 63");
    preparationObj[dataStr] = this.value;

    console.log(preparationFrom);
  });
}
// ! –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ —Ç–∞–± –Ω–∞ —Å–ª–µ–¥ –ø–æ–ª–µ
// –ø–µ—Ä–¥–∞–µ–º –∏–Ω–ø—É—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏–º–ø—É—Ç, –∫–æ–ª-–≤–æ —Ü–∏—Ñ—Ä, –º–∏–Ω —á–∏—Å–ª–æ, –º–∞–∫—Å —á–∏—Å–ª–æ, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
restrictInput(dateFromDayInp, 2, 1, 31, preparationFrom, "prepDay");
restrictInput(dateFromMonthInp, 2, 1, 12, preparationFrom, "prepMonth");
restrictInput(dateFromYearInp, 4, 1, 3000, preparationFrom, "prepYear");

// üìó  ---- üìó

// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
function monthDefinitions() {
  firstDayMonth(DataYear[yearIndex], month - 1);
  dateFromMonthP.textContent =
    month === 0 ? "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü" : Months[month - 1];
  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞ - —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑ –¥–Ω–µ–π
  if (yearIndex != 0 && month != 0) {
    daysChoice.classList.remove("hide");
  } else {
    daysChoice.classList.add("hide");
  }
  console.log("–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞");
}

//–¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
const dateToday = new Date();
const dateStartFrom = 1;
let dateFrom = "";
const inactiveCellColor = "inactive-b";

function add_0(num) {
  return num.toString().length === 1 ? `0${num}` : num;
}

// –≥–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞

// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
function drawSelectYear(component, year) {
  component.textContent = year;
  preparationFrom.prepYear = year;
  console.log(preparationFrom, " –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–æ–ª–µ –≥–æ–¥–∞");
  dateEntry(dateFromYearInp, preparationFrom, "prepYear");
}
// –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –≥–æ–¥–∞
dateFromYear.addEventListener("click", function () {
  yearChoice.classList.toggle("hide");
});

// –æ—Ç–ª–∏—Å—Ç—ã–≤–∞–µ–º –≥–æ–¥ –Ω–∞–∑–∞–¥
dateFromYearLeftBtn.addEventListener("click", function () {
  console.log("–≥–æ–¥ —Å—Ç—Ä–µ–ª–∫–∞ –≤ –ª–µ–≤–æ");
  if (yearIndex < DataYear.length - 1) {
    yearIndex++;
    console.log(yearIndex, "–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å");
    drawSelectYear(dateFromYearP, DataYear[yearIndex]);
  }
});

dateFromYearRightBtn.addEventListener("click", function () {
  console.log("–≥–æ–¥ —Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ");
  if (yearIndex > 0) {
    yearIndex--;
    console.log(yearIndex, "–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å");
    drawSelectYear(dateFromYearP, DataYear[yearIndex]);
  }
});

DataYear.map((val, index) => {
  let yearP = document.createElement("p");
  yearP.textContent = val;
  yearP.addEventListener("click", function () {
    console.log(index, "–∏–Ω–¥–µ–∫—Å –≥–æ–¥–∞");
    yearIndex = index;
    // dateFromYearP.textContent = DataYear[index];
    drawSelectYear(dateFromYearP, DataYear[index]);
    monthDefinitions();
    yearChoice.classList.add("hide");
  });

  yearChoice.appendChild(yearP);
});

// –º–µ—Å—è—Ü–∞
dateFromMonth.addEventListener("click", function () {
  monthChoice.classList.toggle("hide");
});

Array.from(monthElements).forEach((monthElement, index) => {
  monthElement.addEventListener("click", function () {
    const monthIndex = Array.from(monthElements).indexOf(this) + 1;
    console.log(monthIndex, "–Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞");

    // month = monthIndex;

    preparationFrom.prepMonth = monthIndex;
    month = preparationFrom.prepMonth;
    console.log(preparationFrom);
    dateEntry(dateFromMonthInp, preparationFrom, "prepMonth"); //!
    monthDefinitions();
    monthChoice.classList.add("hide");
  });
});
// - –ø—Ä–µ–¥–∏–¥—É—â–∏–π –º–µ—Å—è—Ü
dateFromMonthLeftBtn.addEventListener("click", function () {
  if (month > 1) {
    month--;
    monthDefinitions();
  }
});

// + —Å–ª–µ–¥ –º–µ—Å—è—Ü
dateFromMonthRightBtn.addEventListener("click", function () {
  if (month < 12) {
    month++;
    monthDefinitions();
  }
});

// –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
let dataDayResult = [];
// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
function drawingDays() {
  daysChoiceNum.innerHTML = "";
  dataDayResult.map((val, index) => {
    let daysP = document.createElement("p");
    daysP.classList.add("cp");
    if (val === 0) {
      daysP.style.color = "#e8e7e7";
      daysP.style.backgroundColor = "#e8e7e7";
      daysP.style.border = "none";

      daysP.style.pointerEvents = "none";
    }
    daysP.textContent = val;
    daysP.addEventListener("click", function () {
      console.log("Clicked on day:", val);
      preparationFrom.prepDay = val;
      // console.log(preparationFrom);
      daysP.style.backgroundColor = "#2879ff";
      daysP.style.color = "#fff";
      dateEntry(dateFromDayInp, preparationFrom, "prepDay");
    });
    daysChoiceNum.appendChild(daysP);
  });
}

// ------------------------------------------------------------------
// –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
function firstDayMonth(year, month) {
  dataDayResult = [];

  const fullDate = new Date(year, month, 0);
  const dayOfWeek = fullDate.getDay();

  const dayOfWeekName = Object.keys(DaysOfWeek).find(
    (key) => DaysOfWeek[key] === dayOfWeek
  );
  //   console.log(dayOfWeekName); // –í—ã–≤–æ–¥–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–Ω" –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
  //   console.log(DaysOfWeek[dayOfWeekName]);
  const array = new Array(DaysOfWeek[dayOfWeekName]).fill(0);
  //   console.log(array); // [0, 0, 0]

  const lastDayOfMonth = new Date(year, month + 1, 0).getDate();
  //   console.log(lastDayOfMonth, "–∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ"); // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  //   console.log(AmountOfDays[lastDayOfMonth], "—Å–∫–æ–ª—å–∫–æ —É–±—Ä–∞—Ç—å –æ—Ç 31"); // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ

  dataDayResult = [
    ...array,
    ...(AmountOfDays[lastDayOfMonth] !== 0
      ? DataDay.slice(0, -AmountOfDays[lastDayOfMonth])
      : DataDay),
  ];
  //   console.log(dataDayResult);
  drawingDays();
}

// ==================================================

// —Å–±—Ä–æ—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
dateFromInfoBtn.addEventListener("click", function () {
  console.log("–Ω–∞–∂–∞—Ç —Å–±—Ä–æ—Å");
  // dateFromContentInput.value = "";
  dateFromDayInp.value = "";
  dateFromMonthInp.value = "";
  dateFromYearInp.value = "";
});
// ======================
